# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


jobs:
  - job: Regress
  
    pool: 
      name: 'msvc-asan'   
      demands: IsFast
    
    strategy:
      matrix:
        win32_MT: 
            CRT_FLAG: /MT 
        win32_MD:
          CRT_FLAG: /MD 

    steps:
    - checkout: none


    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: '0bdbc590-a062-4c3f-b0f6-9383f67865ee'
        pipeline: '11796'
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        allowPartiallySucceededBuilds: true
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: llvm_asan_Release_x86_bin

    - task: CmdLine@2
      inputs:
        script: |
            set PATH=%PATH%;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\include;
            set ASAN_RT_LIB_DIR=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86
            set ASAN_RT_BIN_DIR=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin
            echo on
            pushd %MSVC_SRC%
            call %MSVC_SRC%\binaries\x86chk\setenv.cmd x86 %MSVC_SRC%\src
            echo on
            set SKIPENCDIFFS=1
            set _CL_= /d2ASAN /Zi /MT
            set _LINK_= /debug /wholearchive:%ASAN_RT_LIB_DIR%\clang_rt.asan-i386.lib /wholearchive:%ASAN_RT_LIB_DIR%\clang_rt.asan_cxx-i386.lib /force:multiple
            pushd %MSVC_SRC%\src\qa\be\regress
            rl -exe -all -exeflags:"$(CRT_FLAG) /O2 /d2ASAN; $(CRT_FLAG) /Od /d2ASAN; $(CRT_FLAG) /O2 /GL /d2ASAN" -nodirs:"benchi,pogo"
            popd
            popd
            (exit /b 0)
