# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
      include:
        - master
  paths:
    exclude:
      - azure-pipelines.yml
      - azure-pipelines-1.yml
      - azure-pipelines-2.yml
      - azure-pipelines-3.yml
      - llvm/utils/lit/lit/msvc_main.py
      - nonship-RegLogProcess.py

jobs:
  - job: Regress
    timeoutInMinutes: 420
    pool:
      name: 'msvc-asan'
    
    variables:
      - name: ASAN_OPTIONS
        value: halt_on_error=false

    strategy:
      matrix:
        win32_MT_ASAN:
          CRT_FLAG: /MT
          LINK_LIBS: /include:___asan_globals_start /include:___asan_init  %ASAN_RT_LIB_DIR%\clang_rt.asan-i386.lib %ASAN_RT_LIB_DIR%\clang_rt.asan_cxx-i386.lib
          ASAN_FLAG: /d2ASAN
          ARTIFACT_ID: win32_MT_ASAN
        win32_MD_ASAN:
          CRT_FLAG: /MD
          LINK_LIBS: /include:___asan_globals_start /include:___asan_init %ASAN_RT_LIB_DIR%\clang_rt.asan_dynamic-i386.lib %ASAN_RT_LIB_DIR%\clang_rt.asan_dynamic_runtime_thunk-i386.lib
          ASAN_FLAG: /d2ASAN
          ARTIFACT_ID: win32_MD_ASAN
        win32_MT_NOASAN:
          CRT_FLAG: /MT
          LINK_LIBS:
          ASAN_FLAG:
          ARTIFACT_ID: win32_MT_NOASAN
        win32_MD_NOASAN:
          CRT_FLAG: /MD
          LINK_LIBS:
          ASAN_FLAG:
          ARTIFACT_ID: win32_MD_NOASAN
    steps:
    - checkout: none


    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: '0bdbc590-a062-4c3f-b0f6-9383f67865ee'
        pipeline: '11796'
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        allowPartiallySucceededBuilds: true
        downloadType: 'single'
        downloadPath: '$(Build.BinariesDirectory)'
        artifactName: llvm_asan_Release_x86_bin

    - task: CmdLine@2
      inputs:
        script: |
            xcopy %CD:~1,3%msvc_binaries\binaries\x86ret\bin\i386\pgort140.dll %CD:~1,3%msvc_binaries\binaries\x86chk\bin\i386\pgort140.dll 
            set PATH=%PATH%;$(Build.BinariesDirectory)\llvm_asan_Release_x86_bin\bin;$(Build.BinariesDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;$(Build.BinariesDirectory)\llvm_asan_Release_x86_bin\include;
            set ASAN_RT_LIB_DIR=$(Build.BinariesDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86
            set ASAN_RT_BIN_DIR=$(Build.BinariesDirectory)\llvm_asan_Release_x86_bin\bin
            echo on
            pushd %CD:~1,3%msvc_binaries
            set MSVC_SRC=<%~d0\msvc_src_location.txt
            call %CD:~1,3%msvc_binaries\x86chk\setenv.cmd x86 %MSVC_SRC%
            echo on
            set SKIPENCDIFFS=1
            set _CL_= $(ASAN_FLAG) /Zi $(CRT_FLAG)
            set _LINK_= /debug $(LINK_LIBS) /force:multiple
            pushd %MSVC_SRC%\msvc_binaries\src\qa\be\regress
            rl -exe -all
            xcopy /i logs  $(Build.ArtifactStagingDirectory)\logs
            popd
            popd
            (exit /b 0)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: $(ARTIFACT_ID)
        publishLocation: 'Container'
    
  - job: LogProcess
    dependsOn: Regress
    timeoutInMinutes: 30
    pool: 
      name: msvc-asan
    

      
    steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 2
      clean: false

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: win32_MT_ASAN
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: win32_MD_NOASAN

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: win32_MT_NOASAN
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: win32_MD_ASAN
    - task: PythonScript@0
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        scriptSource: 'filePath'
        scriptPath: 'nonship-RegLogProcess.py'
        pythonInterpreter: c:\python37\python.exe
        arguments: $(System.ArtifactsDirectory)\win32_MD_ASAN\logs\rl.x86.exe.results.log $(System.ArtifactsDirectory)\win32_MD_NOASAN\logs\rl.x86.exe.results.log $(System.ArtifactsDirectory)\win32_MT_ASAN\logs\rl.x86.exe.results.log $(System.ArtifactsDirectory)\win32_MT_NOASAN\logs\rl.x86.exe.results.log nonship-faillist.txt nonship-ignorelist.txt

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\\data-viz.xlsx'
        ArtifactName: 'LogProcess-$(Build.BuildId)'
        publishLocation: 'Container'



