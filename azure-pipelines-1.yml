# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
      include:
        - master
  paths:
    exclude:
      - azure-pipelines.yml
      - azure-pipelines-1.yml
      - azure-pipelines-2.yml
      - azure-pipelines-3.yml
      - llvm/utils/lit/lit/msvc_main.py
      - nonship-RegLogProcess.py



jobs:
  - job: MSVC_Tests
    variables:
    - name: UNIX_BIN_DIR
      value: $(System.ArtifactsDirectory)\unix\cygwin64\bin
    - name: ASAN_SYMBOLIZER_PATH
      value: $(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin\llvm-symbolizer.exe
    - name: ASAN_RT_SRC_ROOT
      value: $(Build.SourcesDirectory)\compiler-rt
    - name: TEST_OUTPUT_DIR
      value: $(Build.BinariesDirectory)
    - name: TEST_C_COMPILER
      value: cl.exe
    - name: ASAN_RT_LIB_DIR
      value: $(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86
    - name: ASAN_RT_BIN_DIR
      value: $(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin




    timeoutInMinutes: 60
    pool:
      name: 'msvc-asan'




    steps:

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: '0bdbc590-a062-4c3f-b0f6-9383f67865ee'
        pipeline: '11796'
        buildVersionToDownload: 'latest'
        artifactName: llvm_asan_Release_x86_bin
        downloadType: 'specific'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |
        taskkill /f /t /im mspdbsrv.exe 2>&1
        taskkill /f /t /im msbuild.exe 2>&1
        taskkill /f /t /im cl.exe 2>&1
        taskkill /f /t /im link.exe 2>&1
        (exit /b 0)
      continueOnError: true

    - script: |
        pushd $(Build.SourcesDirectory)\llvm\utils\lit
        c:\python27\python.exe setup.py install
        popd
        (exit /b 0)

    - script: git clone https://$(sectools.token)@sectools.visualstudio.com/DefaultCollection/AddressSanitizer/_git/unix_test_dependencies $(Build.ArtifactStagingDirectory)\unix 2>&1

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: $(Build.ArtifactStagingDirectory)\unix\gnuwin32\unzip.ps1
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: Expand-Archive $(Build.ArtifactStagingDirectory)\unix\cygwin64.zip $(Build.ArtifactStagingDirectory)\unix\


    - script: |
        echo on
        set PATH=%PATH%;$(System.ArtifactsDirectory)\unix\gnuwin32\bin;$(System.ArtifactsDirectory)\unix\bin;$(System.ArtifactsDirectory)\unix\cygwin64\bin;$(System.ArtifactsDirectory);$(Build.SourcesDirectory)\llvm\utils\lit;$(Build.SourcesDirectory)\llvm\utils\lit\lit;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\include;$(System.ArtifactsDirectory)\bin;
        call %MSVC_SRC%\binaries\x86chk\setenv.cmd x86 %MSVC_SRC%\src
        set PATH=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%PATH%;
        set LIB=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%LIB%;
        set INCLUDE=%INCLUDE%;$(Build.SourcesDirectory)\compiler-rt\include;$(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases\defines.h
        pushd $(Build.SourcesDirectory)\llvm\utils\lit\lit
        c:\python27\python.exe $(Build.SourcesDirectory)\llvm\utils\lit\lit\msvc_main.py $(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases\Windows x86 --write-sql-results -d pyodbc
        popd
      displayName: 'Run Windows specific tests default'
      env:
        SQL_TABLE_NAME: windows_static
      continueOnError: 'true'


    - script: |
        echo on
        set PATH=%PATH%;$(System.ArtifactsDirectory)\unix\gnuwin32\bin;$(System.ArtifactsDirectory)\unix\bin;$(System.ArtifactsDirectory)\unix\cygwin64\bin;$(System.ArtifactsDirectory);$(Build.SourcesDirectory)\llvm\utils\lit;$(Build.SourcesDirectory)\llvm\utils\lit\lit;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\include;$(System.ArtifactsDirectory)\bin;
        call %MSVC_SRC%\binaries\x86chk\setenv.cmd x86 %MSVC_SRC%\src
        set PATH=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%PATH%;
        set LIB=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%LIB%;
        set INCLUDE=%INCLUDE%;$(Build.SourcesDirectory)\compiler-rt\include;$(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases\defines.h
        pushd $(Build.SourcesDirectory)\llvm\utils\lit\lit
        c:\python27\python.exe $(Build.SourcesDirectory)\llvm\utils\lit\lit\msvc_main.py $(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases\Windows x86 --force-dynamic --write-sql-results -d pyodbc
        popd

      displayName: 'Run Windows specific tests dynamic'
      env:
        SQL_TABLE_NAME: windows_dynamic
      continueOnError: 'true'

    - script: |
        echo on
        set PATH=%PATH%;$(System.ArtifactsDirectory)\unix\gnuwin32\bin;$(System.ArtifactsDirectory)\unix\bin;$(System.ArtifactsDirectory)\unix\cygwin64\bin;$(System.ArtifactsDirectory);$(Build.SourcesDirectory)\llvm\utils\lit;$(Build.SourcesDirectory)\llvm\utils\lit\lit;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\include;$(System.ArtifactsDirectory)\bin;
        call %MSVC_SRC%\binaries\x86chk\setenv.cmd x86 %MSVC_SRC%\src
        set PATH=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%PATH%;
        set LIB=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%LIB%;
        set INCLUDE=%INCLUDE%;$(Build.SourcesDirectory)\compiler-rt\include;$(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases\defines.h
        pushd $(Build.SourcesDirectory)\llvm\utils\lit\lit
        c:\python27\python.exe $(Build.SourcesDirectory)\llvm\utils\lit\lit\msvc_main.py $(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases x86 --write-sql-results -d pyodbc
        popd
      displayName: 'Run asan tests static'
      env:
        SQL_TABLE_NAME: asan_static
      continueOnError: 'true'

    - script: |
        echo on
        set PATH=%PATH%;$(System.ArtifactsDirectory)\unix\gnuwin32\bin;$(System.ArtifactsDirectory)\unix\bin;$(System.ArtifactsDirectory)\unix\cygwin64\bin;$(System.ArtifactsDirectory);$(Build.SourcesDirectory)\llvm\utils\lit;$(Build.SourcesDirectory)\llvm\utils\lit\lit;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\bin;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\include;$(System.ArtifactsDirectory)\bin;
        call %MSVC_SRC%\binaries\x86chk\setenv.cmd x86 %MSVC_SRC%\src
        set PATH=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%PATH%;
        set LIB=$(System.ArtifactsDirectory)\llvm_asan_Release_x86_bin\lib\windows\x86;%LIB%;
        set INCLUDE=%INCLUDE%;$(Build.SourcesDirectory)\compiler-rt\include;$(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases\defines.h
        pushd $(Build.SourcesDirectory)\llvm\utils\lit\lit
        c:\python27\python.exe $(Build.SourcesDirectory)\llvm\utils\lit\lit\msvc_main.py $(Build.SourcesDirectory)\compiler-rt\test\asan\TestCases x86 --write-sql-results -d pyodbc --force-dynamic
        popd
      displayName: 'Run asan tests dynamic'
      env:
        SQL_TABLE_NAME: asan_dynamic
      continueOnError: 'true'
