# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
      include:
        - master
  paths:
    exclude:
      - azure-pipelines.yml
      - azure-pipelines-1.yml
      - azure-pipelines-2.yml
      - azure-pipelines-3.yml
      - llvm/utils/lit/lit/msvc_main.py
      - nonship-RegLogProcess.py

name: llvm build
jobs:

  - job: Windows
    variables:
      - name: LLVM_VERSION
        value: 9.0.0


    timeoutInMinutes: 360
    pool:
      name: 'msvc-asan'
      demands:
      - Cmake
      - IsFast

    strategy:
      matrix:

#        64-bit Release:
#          BuildType: RelWithDebInfo
#          CMakeArgs: Visual Studio 16 2019
#          vcvars: vcvars64.bat
#          buildArch: x64
#          msdia_loc: x64\\msdia140.dll
#          additional_args: 
#          buildTag: ""

        32-bit Release:
          BuildType: RelWithDebInfo
          CMakeArgs: Visual Studio 16 2019
          vcvars: vcvarsamd64_x86.bat
          buildArch: x86
          msdia_loc: msdia140.dll
          additional_args: 
          buildTag: ""

    steps:
    - checkout: self
      clean: all

    - script: git clone https://$(sectools.token)@sectools.visualstudio.com/DefaultCollection/AddressSanitizer/_git/unix_test_dependencies $(Build.ArtifactStagingDirectory)\unix 2>&1
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: $(Build.ArtifactStagingDirectory)\unix\gnuwin32\unzip.ps1
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: Expand-Archive $(Build.ArtifactStagingDirectory)\unix\cygwin64.zip $(Build.ArtifactStagingDirectory)\unix\

    - script: |
        set PATH=%PATH%;$(Build.ArtifactStagingDirectory)\unix\gnuwin32\bin;$(Build.ArtifactStagingDirectory)\unix\bin;$(Build.ArtifactStagingDirectory)\unix\cygwin64\bin;
        //echo ##vso[task.prependpath]$(Build.ArtifactStagingDirectory)\unix\gnuwin32\bin;$(Build.ArtifactStagingDirectory)\unix\bin;$(Build.ArtifactStagingDirectory)\unix\cygwin64\bin
        echo on
        where cat
        where awk
        where sed
        where grep

    #- script: '@call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\$(vcvars)"'

    - script: |
        echo on
        set PATH=%PATH%;$(Build.ArtifactStagingDirectory)\unix\gnuwin32\bin;$(Build.ArtifactStagingDirectory)\unix\bin;$(Build.ArtifactStagingDirectory)\unix\cygwin64\bin;
        rd /s /q $(Build.BinariesDirectory)
        mkdir $(Build.BinariesDirectory)
        mkdir $(Build.BinariesDirectory)\bin
        @call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\$(vcvars)"
        echo set ASAN_SYMBOLIZER_PATH=$(Build.BinariesDirectory)\bin\llvm-symbolizer.exe
        set ASAN_SYMBOLIZER_PATH=$(Build.BinariesDirectory)\bin\llvm-symbolizer.exe
        pushd $(Build.BinariesDirectory) & echo on & cmake -G Ninja -DLLVM_ENABLE_PROJECTS="compiler-rt;lld;clang;polly" -DCOMPILER_RT_BUILD_LIBFUZZER=ON -DCMAKE_C_FLAGS="/wd4200 /wd4206" $(additional_args) $(Build.SourcesDirectory)\llvm & popd
      displayName: Set ASAN symbolizer path


    - task: CmdLine@2
      displayName: build llvm-symbolizer
      inputs:
        script: call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\$(vcvars)" && chdir $(Build.BinariesDirectory) && ninja llvm-symbolizer


    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: Copy-Item "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Packages\\Debugger\\$(msdia_loc)" "$(Build.BinariesDirectory)\\bin"

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: echo Copy-Item "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Packages\\Debugger\\$(msdia_loc)" "$(Build.BinariesDirectory)\\"
    - task: CmdLine@2
      displayName: Check-Asan
      inputs:
        script: call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\$(vcvars)" && chdir $(Build.BinariesDirectory) && ninja check-asan

    - task: CmdLine@2
      displayName: Check-Asan-Dynamic
      inputs:
        script: |
          set PATH=%PATH%;$(Build.ArtifactStagingDirectory)\unix\gnuwin32\bin;$(Build.ArtifactStagingDirectory)\unix\bin;$(Build.ArtifactStagingDirectory)\unix\cygwin64\bin;
          @call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\$(vcvars)"
          set ASAN_SYMBOLIZER_PATH=$(Build.BinariesDirectory)\bin\llvm-symbolizer.exe
          pushd $(Build.BinariesDirectory)
          echo on
          ninja check-asan-dynamic
        
    - script: |
        echo on
        mkdir $(Build.BinariesDirectory)\shipping_components
        mkdir $(Build.BinariesDirectory)\shipping_components\lib\windows\$(buildArch)
        mkdir $(Build.BinariesDirectory)\shipping_components\include\sanitizer
        mkdir $(Build.BinariesDirectory)\shipping_components\share
        cp $(Build.BinariesDirectory)\lib\clang\$(LLVM_VERSION)\include\sanitizer\*  $(Build.BinariesDirectory)\shipping_components\include\sanitizer\
        cp $(Build.BinariesDirectory)\lib\clang\$(LLVM_VERSION)\lib\windows\* $(Build.BinariesDirectory)\shipping_components\lib\windows\$(buildArch)\
        cp $(Build.BinariesDirectory)\lib\clang\$(LLVM_VERSION)\share\*  $(Build.BinariesDirectory)\shipping_components\share\
        cp $(Build.SourcesDirectory)\compiler-rt\LICENSE.txt  $(Build.BinariesDirectory)\shipping_components\
        cp $(Build.BinariesDirectory)\bin\llvm-symbolizer.exe   $(Build.BinariesDirectory)\shipping_components\
        cp $(Build.BinariesDirectory)\bin\msdia140.dll $(Build.BinariesDirectory)\shipping_components\
      failOnStderr: "True"


    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.BinariesDirectory)\shipping_components'
        ArtifactName: llvm_asan_$(BuildType)_$(buildArch)
        publishLocation: 'Container'

    - script: |
            echo on
            set PATH=%PATH%;$(Build.ArtifactStagingDirectory)\unix\gnuwin32\bin;$(Build.ArtifactStagingDirectory)\unix\bin;$(Build.ArtifactStagingDirectory)\unix\cygwin64\bin;
            mkdir $(Build.BinariesDirectory)\shipping_components\bin
            cp $(Build.BinariesDirectory)\bin\* $(Build.BinariesDirectory)\shipping_components\bin\

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.BinariesDirectory)\shipping_components'
        ArtifactName: llvm_asan_$(BuildType)_$(buildArch)_bin
        publishLocation: 'Container'

    #- script: rd /s /q $(Build.SourcesDirectory)\asan_utils && git clone https://github.com/mcgov/Win32-AddressSanitizer-Utils.git $(Build.SourcesDirectory)\asan_utils
